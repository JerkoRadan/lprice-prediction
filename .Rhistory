mean(abs(results_prev$max_price-results_prev$max_price_pred))
##### Train the model 1 (Linear regression)
model1_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
#------ Normalized data--------
# For price_variation
varPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_variation)
varPrice_Norm_Training <- data.frame(model.matrix(~., data=varPrice_Norm_Training_prev))
# For price_percentage_variation
percentage_varPriceNorm_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation)
percentage_varPriceNorm_Training <- data.frame(model.matrix(~., data=percentage_varPrice_prev))
#------ Normalized data--------
# For price_variation
varPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_variation)
varPrice_Norm_Training <- data.frame(model.matrix(~., data=varPrice_Norm_Training_prev))
# For price_percentage_variation
percentage_varPriceNorm_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation)
percentage_varPriceNorm_Training <- data.frame(model.matrix(~., data=percentage_varPrice_prev))
#------ Normalized data--------
# For price_variation
varPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_variation)
varPrice_Norm_Training <- data.frame(model.matrix(~., data=varPrice_Norm_Training_prev))
# For price_percentage_variation
percentage_varPriceNorm_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation)
percentage_varPriceNorm_Training <- data.frame(model.matrix(~., data=percentage_varPrice_prev))
clean6 <- clean6 %>%
mutate(price_variation = max_price - min_price)
# Price percentage variation
clean6 <- clean6 %>%
mutate(price_percentage_variation = (max_price - min_price)/min_price)
index_Response <- match(c("max_price", "min_price", "price_variation", "price_percentage_variation"), names(clean6))
preProcValues <- preProcess(clean6[-index_Response], method = "range")
trainScaled <- predict(preProcValues, clean6)
glimpse(trainScaled)
testScaled <- predict(preProcValues, clean_test3)
glimpse(testScaled)
varPrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_variation)
varPrice_Clean_Training <- data.frame(model.matrix(~., data=varPrice_Clean_Training_prev))
# For price_percentage_variation
percentage_varPrice_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation)
percentage_varPrice_Training <- data.frame(model.matrix(~., data=percentage_varPrice_prev))
#------ Normalized data--------
# For price_variation
varPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_variation)
varPrice_Norm_Training <- data.frame(model.matrix(~., data=varPrice_Norm_Training_prev))
# For price_percentage_variation
percentage_varPriceNorm_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation)
percentage_varPriceNorm_Training <- data.frame(model.matrix(~., data=percentage_varPrice_prev))
##### Train the model 1 (Linear regression)
model1_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_varPrice <- train(price_variation ~ . , data = varPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_varPrice <- train(price_variation ~ . , data = varPrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
model1_varPrice$results$MAE
model2_varPrice$results$MAE
model3_varPrice$results$MAE
model4_varPrice$results$MAE
model5_varPrice$results$MAE
model6_varPrice$results$MAE
model7_varPrice$results$MAE
model8_varPrice$results$MAE
model1_varPrice$results$MAE
model2_varPrice$results$MAE
model3_varPrice$results$MAE
min(model4_varPrice$results$MAE)
min(model5_varPrice$results$MAE)
min(model6_varPrice$results$MAE)
min(model7_varPrice$results$MAE)
min(model8_varPrice$results$MAE)
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
min_price_pred <- data.frame(predict(model7_min, type = "raw"))
var_pred <- data.frame(predict(model4_varPrice, type = "raw"))
max_price_pred <- min_price_pred+var_pred
names(max_price_pred) <- "max_price_pred"
results_prev <- cbind(actual_max_price, max_price_pred)
results_prev
mean(abs(results_prev$max_price-results_prev$max_price_pred)) #MAE=81.12 (model7)
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
min_price_pred <- data.frame(predict(model7_min, type = "raw"))
var_pred <- data.frame(predict(model7_varPrice, type = "raw"))
max_price_pred <- min_price_pred+var_pred
names(max_price_pred) <- "max_price_pred"
results_prev <- cbind(actual_max_price, max_price_pred)
mean(abs(results_prev$max_price-results_prev$max_price_pred)) #MAE=81.12 (model7)
mean(abs(actual_max_price-results_prev$max_price_pred)) #MAE=81.18 (model7)
mean(abs(actual_max_price$max_price-results_prev$max_price_pred)) #MAE=81.18 (model7)
model1_varPrice$results$MAE
model2_varPrice$results$MAE
model3_varPrice$results$MAE
min(model4_varPrice$results$MAE) #This is the best model for the variation, but not the best for max_price
min(model5_varPrice$results$MAE)
min(model6_varPrice$results$MAE)
min(model7_varPrice$results$MAE)
min(model8_varPrice$results$MAE)
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
min_price_pred <- data.frame(predict(model7_min, type = "raw"))
var_pred1 <- data.frame(predict(model1_varPrice, type = "raw"))
var_pred2 <- data.frame(predict(model2_varPrice, type = "raw"))
var_pred3 <- data.frame(predict(model3_varPrice, type = "raw"))
var_pred4 <- data.frame(predict(model4_varPrice, type = "raw"))
var_pred5 <- data.frame(predict(model5_varPrice, type = "raw"))
var_pred6 <- data.frame(predict(model6_varPrice, type = "raw"))
var_pred7 <- data.frame(predict(model7_varPrice, type = "raw"))
var_pred8 <- data.frame(predict(model8_varPrice, type = "raw"))
max_price_pred1 <- min_price_pred+var_pred1
names(max_price_pred1) <- "max_price_pred"
max_price_pred2 <- min_price_pred+var_pred2
names(max_price_pred2) <- "max_price_pred"
max_price_pred3 <- min_price_pred+var_pred3
names(max_price_pred3) <- "max_price_pred"
max_price_pred4 <- min_price_pred+var_pred4
names(max_price_pred4) <- "max_price_pred"
max_price_pred5 <- min_price_pred+var_pred5
names(max_price_pred5) <- "max_price_pred"
max_price_pred6 <- min_price_pred+var_pred6
names(max_price_pred6) <- "max_price_pred"
max_price_pred7 <- min_price_pred+var_pred7
names(max_price_pred7) <- "max_price_pred"
max_price_pred8 <- min_price_pred+var_pred8
names(max_price_pred8) <- "max_price_pred"
mean(abs(actual_max_price$max_price-results_prev$max_price_pred1))
mean(abs(actual_max_price$max_price-results_prev$max_price_pred2))
mean(abs(actual_max_price$max_price-results_prev$max_price_pred3))
mean(abs(actual_max_price$max_price-results_prev$max_price_pred4))
mean(abs(actual_max_price$max_price-results_prev$max_price_pred5))
mean(abs(actual_max_price$max_price-results_prev$max_price_pred6))
mean(abs(actual_max_price$max_price-results_prev$max_price_pred7)) #MAE=81.18 (model7)
mean(abs(actual_max_price$max_price-results_prev$max_price_pred8))
mean(abs(actual_max_price$max_price-max_price_pred1$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred2$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred3$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred4$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred5$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred6$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred)) #MAE=81.18 (model7)
mean(abs(actual_max_price$max_price-max_price_pred8$max_price_pred))
print(min(model7_max$results$MAE+MAE_price_var7))
print(min(model7_max$results$MAE)+MAE_price_var7)
MAE_price_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_max$results$MAE)+MAE_price_var7)
##### Train the model 1 (Linear regression)
model1_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPriceNorm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPriceNorm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPriceNorm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPriceNorm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPrice_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPrice_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPrice_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_perc_varPrice <- train(price_percentage_variation ~ . , data = percentage_varPrice_Training,
method = "gbm", trControl = train.control, metric = "MAE")
model1_perc_varPrice$results$MAE
model2_perc_varPrice$results$MAE
model3_perc_varPrice$results$MAE
min(model4_perc_varPrice$results$MAE) #This is the best model for the variation, but not the best for max_price
min(model5_perc_varPrice$results$MAE)
min(model6_perc_varPrice$results$MAE)
min(model7_perc_varPrice$results$MAE)
min(model8_perc_varPrice$results$MAE)
perc_var_pred1 <- data.frame(predict(model1_perc_varPrice, type = "raw"))
perc_var_pred2 <- data.frame(predict(model2_perc_varPrice, type = "raw"))
perc_var_pred3 <- data.frame(predict(model3_perc_varPrice, type = "raw"))
perc_var_pred4 <- data.frame(predict(model4_perc_varPrice, type = "raw"))
perc_var_pred5 <- data.frame(predict(model5_perc_varPrice, type = "raw"))
perc_var_pred6 <- data.frame(predict(model6_perc_varPrice, type = "raw"))
perc_var_pred7 <- data.frame(predict(model7_perc_varPrice, type = "raw"))
perc_var_pred8 <- data.frame(predict(model8_perc_varPrice, type = "raw"))
max_price_perc_pred1 <- min_price_pred*(1+perc_var_pred1)
names(max_price_perc_pred1) <- "max_price_pred"
max_price_perc_pred2 <- min_price_pred*(1+perc_var_pred2)
names(max_price_perc_pred2) <- "max_price_pred"
max_price_perc_pred3 <- min_price_pred*(1+perc_var_pred3)
names(max_price_perc_pred3) <- "max_price_pred"
max_price_perc_pred4 <- min_price_pred*(1+perc_var_pred4)
names(max_price_perc_pred4) <- "max_price_pred"
max_price_perc_pred5 <- min_price_pred*(1+perc_var_pred5)
names(max_price_perc_pred5) <- "max_price_pred"
max_price_perc_pred6 <- min_price_pred*(1+perc_var_pred6)
names(max_price_perc_pred6) <- "max_price_pred"
max_price_perc_pred7 <- min_price_pred*(1+perc_var_pred7)
names(max_price_perc_pred7) <- "max_price_pred"
max_price_perc_pred8 <- min_price_pred*(1+perc_var_pred8)
names(max_price_perc_pred8) <- "max_price_pred"
mean(abs(actual_max_price$max_price-max_price_perc_pred1$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred2$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred3$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred4$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred5$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred6$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred)) #Best model MAE=81.18 (model7)
mean(abs(actual_max_price$max_price-max_price_perc_pred8$max_price_pred))
MAE_price_var7 <- mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred))
print(min(model7_max$results$MAE)+MAE_price_var7)
print(min(model7_max$results$MAE)+MAE_price_var7)
MAE_price_perc_var7 <- mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred))
print(min(model7_max$results$MAE)+MAE_price_perc_var7)
MAE_price_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_max$results$MAE)+MAE_price_var7)
bothModels2 <- list(model7_min ,model7_perc_varPrice)
pred_prev <- data.frame(predict(bothModels, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("MIN","Price_perc_dif")
pred_prev
pred <- pred_prev %>% select(MIN, MIN*(1+Price_perc_dif))
bothModels2 <- list(model7_min ,model7_perc_varPrice)
pred_prev <- data.frame(predict(bothModels2, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("MIN","Price_perc_dif")
pred_prev
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN*(1+pred_prev$Price_perc_dif))
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 4(Parallel Random Forest with percentage variation).csv", row.names = F)
bothModels3 <- list(model7_min ,model7_varPrice)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("MIN","Price_dif")
pred_prev
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev$Price_dif)
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 5(Parallel Random Forest with price variation).csv", row.names = F)
model1_varPrice$results$MAE
model2_varPrice$results$MAE
model3_varPrice$results$MAE
min(model4_varPrice$results$MAE) #This is the best model for the variation, but not the best for max_price
min(model5_varPrice$results$MAE)
min(model6_varPrice$results$MAE)
min(model7_varPrice$results$MAE)
min(model8_varPrice$results$MAE)
mean(abs(actual_max_price$max_price-max_price_pred1$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred2$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred3$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred4$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred5$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred6$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred)) #Best model MAE=81.18 (model7)
mean(abs(actual_max_price$max_price-max_price_pred8$max_price_pred))
max_price_pred4$max_price_pred
max_price_pred7$max_price_pred
max_price_pred4$max_price_pred
bothModels3 <- list(model7_min ,model4_varPrice)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Elastic net (glm)
names(pred_prev) <- c("MIN","Price_dif")
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev$Price_dif)
pred
# ----- Export to a file ------
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 6(Parallel Random Forest with price variation EGLM).csv", row.names = F)
pred_prev
pred_prev <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest
pred_prev <- data.frame(predict(model4_varPrice, Price_NormTest, type = "raw")) #Elastic net (glm)
names(pred_prev) <- c("MIN","Price_dif")
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev$Price_dif)
pred
pred_prev1 <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest
pred_prev2 <- data.frame(predict(model4_varPrice, Price_NormTest, type = "raw")) #Elastic net (glm)
pred_prev1
pred_prev2
names(pred_prev1) <- "MIN"
names(pred_prev2) <- "Price_dif"
pred <- pred_prev1 %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev2$Price_dif)
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 6(Parallel Random Forest with price variation EGLM).csv", row.names = F)
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
bothModels <- list(model7_min ,model7_max)
pred <- data.frame(predict(bothModels, Price_Test, type = "raw")) #Parallel Random Forest
names(pred) <- c("MIN","MAX")
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 7(Parallel Random Forest K=10).csv", row.names = F)
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
max_price_pred <- data.frame(predict(model7_max, type = "raw"))
min_price_pred7 <- max_price_pred+var_pred7
names(min_price_pred7) <- "min_price_pred"
mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred))
min_price_pred7 <- max_price_pred-var_pred7
names(min_price_pred7) <- "min_price_pred"
mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred)) #Worse result using
MAE_maxprice_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_var7) #Using min_price as base price
MAE_minprice_var7 <- mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred))
print(min(model7_max$results$MAE)+MAE_minprice_var7) #Using min_price as base price
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
min_price_pred <- data.frame(predict(model7_min, type = "raw"))
max_price_pred <- data.frame(predict(model7_max, type = "raw"))
min_price_pred7 <- max_price_pred-var_pred7
names(min_price_pred7) <- "min_price_pred"
mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred)) #Best model MAE=81.18 (using min_price as base price)
mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred)) #MAE = 75.74585 (using max_price as base price)
MAE_maxprice_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_var7) #Using min_price as base price
MAE_minprice_var7 <- mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred))
print(min(model7_max$results$MAE)+MAE_minprice_var7) #Using max_price as base price
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("Price_dif", "MAX")
pred <- pred_prev %>% mutate(MIN = pred_prev$MAX - pred_prev$Price_perc_dif)
othModels3 <- list(model7_varPrice, model7_max)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("Price_dif", "MAX")
pred <- pred_prev %>% mutate(MIN = pred_prev$MAX - pred_prev$Price_dif)
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("Price_dif", "MAX")
pred <- pred_prev %>% mutate(MIN = pred_prev$MAX - pred_prev$Price_dif)
pred
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- pred_prev3 %>% mutate(MIN = pred_prev3$MAX - pred_prev3$Price_dif)
pred3
pred_prev3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
pred3
names(pred3) <- "MIN"
pred3 <- pred_prev3 %>% select(MAX)
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3 <- pred_prev3$MAX
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX =pred_prev3$MAX)
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3['MAX'] <- pred_prev3$MAX
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3
pred3 <- pred_prev3 %>% select(MAX)
pred3
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred_prev3 %>% mutate(MAX = MAX)
pred3
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
# Training control definition
set.seed(123)
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
#--------Models for maxPrice with Normalized data (except decision tree models) -----------------
#Features: brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,
#          cpu_benchmark_score, gpu_benchmark_score
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
View(Price_Test)
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 8(PRF with price variation base on max_price).csv", row.names = F)
results <- cbind(id_test,pred3)
results
write.csv(results, file = "Model 8(PRF with price variation base on max_price).csv", row.names = F)
print(min(model7_max$results$MAE)+MAE_minprice_var7) #Using max_price as base price
abs(actual_min_price$min_price-min_price_pred7$min_price_pred)
print(min(model7_min$results$MAE)+MAE_price_perc_var7) #Best model
print(min(model7_min$results$MAE)+MAE_maxprice_perc_var7) #Best model
MAE_maxprice_perc_var7 <- mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_perc_var7) #Best model
MAE_maxprice_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_var7) #Using min_price as base price
min_price_perc_pred7 <- max_price_perc_pred-perc_var_pred7
names(min_price_perc_pred7) <- "min_price_pred"
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
min_price_pred <- data.frame(predict(model7_min, type = "raw"))
max_price_pred <- data.frame(predict(model7_max, type = "raw"))
min_price_perc_pred7 <- max_price_perc_pred-perc_var_pred7
names(min_price_perc_pred7) <- "min_price_pred"
