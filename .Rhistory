?xyplot
xyplot(resamples(model_list_max), models = c("parRF", "xgbTree"), metric = "MAE")
xyplot(resamples(model_list_min2), models = c("parRF", "xgbTree"), metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
# model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
#                     method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 9 Parallel Random Forest  <---------------BEST MODEL SO FAR
model9_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "parRF", trControl = train.control, metric = "MAE")
print(min(model7_max$results$MAE+model7_min$results$MAE))
print(min(model7_max$results$MAE+model9_min$results$MAE))
id_train <- clean6 %>% select(id)
train_max <- data.frame(predict(model7_max, type = "raw"))
names(train_max) <- "train_max"
prueba <-cbind(id_train,train_max)
train_max2 <- data.frame(predict(model1_max, type = "raw"))
names(train_max2) <- "train_max"
prueba2 <-cbind(id_train,train_max2)
train_max3 <- data.frame(predict(model2_max, type = "raw"))
names(train_max3) <- "train_max"
prueba3 <-cbind(id_train,train_max3)
train_max4 <- data.frame(predict(model3_max, type = "raw"))
names(train_max4) <- "train_max"
prueba4 <-cbind(id_train,train_max4)
train_max5 <- data.frame(predict(model4_max, type = "raw"))
names(train_max5) <- "train_max"
prueba5 <-cbind(id_train,train_max5)
train_max6 <- data.frame(predict(model5_max, type = "raw"))
names(train_max6) <- "train_max"
prueba6 <-cbind(id_train,train_max6)
train_max7 <- data.frame(predict(model6_max, type = "raw"))
names(train_max7) <- "train_max"
prueba7 <-cbind(id_train,train_max7)
train_max8 <- data.frame(predict(model8_max, type = "raw"))
names(train_max8) <- "train_max"
prueba8 <-cbind(id_train,train_max8)
prueba[prueba$id==6685,]
prueba2[prueba2$id==6685,]
prueba3[prueba3$id==6685,]
prueba4[prueba4$id==6685,]
prueba5[prueba5$id==6685,]
prueba6[prueba6$id==6685,]
prueba7[prueba7$id==6685,]
prueba8[prueba8$id==6685,]
train_min <- data.frame(predict(model9_min, type = "raw"))
names(train_min) <- "train_min"
train_min5 <- data.frame(predict(model4_min, type = "raw"))
names(train_min5) <- "train_min"
train_min7 <- data.frame(predict(model6_min, type = "raw"))
names(train_min7) <- "train_min"
train_min8 <- data.frame(predict(model8_min, type = "raw"))
names(train_min8) <- "train_min"
predic_weighted_ave_max <- (train_max*3/4)+(train_max7*1/4)
predic_weighted_ave_min <- (train_min*3/4)+(train_min7*1/4)
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))+ mean(abs(actual_min_price$min_price-predic_weighted_ave_min$train_min))
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
id_train <- clean6 %>% select(id)
train_max <- data.frame(predict(model7_max, type = "raw"))
names(train_max) <- "train_max"
prueba <-cbind(id_train,train_max)
# train_max2 <- data.frame(predict(model1_max, type = "raw"))
# names(train_max2) <- "train_max"
# prueba2 <-cbind(id_train,train_max2)
#
# train_max3 <- data.frame(predict(model2_max, type = "raw"))
# names(train_max3) <- "train_max"
# prueba3 <-cbind(id_train,train_max3)
#
# train_max4 <- data.frame(predict(model3_max, type = "raw"))
# names(train_max4) <- "train_max"
# prueba4 <-cbind(id_train,train_max4)
#
# train_max5 <- data.frame(predict(model4_max, type = "raw"))
# names(train_max5) <- "train_max"
# prueba5 <-cbind(id_train,train_max5)
#
# train_max6 <- data.frame(predict(model5_max, type = "raw"))
# names(train_max6) <- "train_max"
# prueba6 <-cbind(id_train,train_max6)
train_max7 <- data.frame(predict(model6_max, type = "raw"))
names(train_max7) <- "train_max"
prueba7 <-cbind(id_train,train_max7)
# train_max8 <- data.frame(predict(model8_max, type = "raw"))
# names(train_max8) <- "train_max"
# prueba8 <-cbind(id_train,train_max8)
# prueba[prueba$id==6685,]
# prueba2[prueba2$id==6685,]
# prueba3[prueba3$id==6685,]
# prueba4[prueba4$id==6685,]
# prueba5[prueba5$id==6685,]
# prueba6[prueba6$id==6685,]
# prueba7[prueba7$id==6685,]
# prueba8[prueba8$id==6685,]
train_min <- data.frame(predict(model9_min, type = "raw"))
names(train_min) <- "train_min"
# train_min5 <- data.frame(predict(model4_min, type = "raw"))
# names(train_min5) <- "train_min"
train_min7 <- data.frame(predict(model6_min, type = "raw"))
names(train_min7) <- "train_min"
# train_min8 <- data.frame(predict(model8_min, type = "raw"))
# names(train_min8) <- "train_min"
predic_weighted_ave_max <- (train_max*3/4)+(train_max7*1/4)
predic_weighted_ave_min <- (train_min*3/4)+(train_min7*1/4)
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))+ mean(abs(actual_min_price$min_price-predic_weighted_ave_min$train_min))
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))
predic_weighted_ave_max
cbind(id_train,actual_max_price$max_price,predic_weighted_ave_max,actual_max_price$max_price-predic_weighted_ave_max)
cbind(id_train,actual_max_price$max_price,predic_weighted_ave_max,abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))
cbind(id_train,actual_max_price$max_price,train_max)
cbind(id_train,actual_max_price$max_price,predic_weighted_ave_max,train_max)
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max))+ mean(abs(actual_min_price$min_price-predic_weighted_ave_min$train_min))
mean(abs(actual_max_price$max_price-predic_weighted_ave_max$train_max)+abs(actual_min_price$min_price-predic_weighted_ave_min$train_min))
model7_max$results$MAE
mean(abs(actual_max_price$max_price-train_max))
train_max
actual_max_price$max_price
class(actual_max_price)
class(train_max)
mean(abs(actual_max_price$max_price-train_max$train_max))
model7_max$results
mae(train_max$train_max,actual_max_price$max_price)
MAE(train_max$train_max,actual_max_price$max_price)
postResample(pred = train_max$train_max, obs = actual_max_price$max_price)
names(model7_max)
postResample(pred = model7_max$pred, obs = actual_max_price$max_price)
model7_max$pred
print(model7_max)
names(model7_max)
print(model7_max)
print(model7_max$metric)
print(model7_max$modelInfo)
print(model7_max$results)
print(model7_max$pred)
print(model7_max$preProcess)
mean(abs(model7_max$pred$obs-model7_max$pred$pred))
maxPrice_Clean_Training2 <- clean6 %>%
select(brand, touchscreen, screen_size, weight, ram, storage, detachable_keyboard, ssd,os, max_price)
minPrice_Clean_Training3 <- clean6 %>%
select(brand, touchscreen, screen_size, weight, ram, storage, detachable_keyboard, ssd,os, min_price)
install.packages(c("pdp", "vip"))
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
library(caretEnsemble)
library(pdp)
library(vip)
maxPrice_Clean_Training2 <- clean6 %>%
select(brand, touchscreen, screen_size, weight, ram, storage, detachable_keyboard, ssd,os, max_price)
minPrice_Clean_Training3 <- clean6 %>%
select(brand, touchscreen, screen_size, weight, ram, storage, detachable_keyboard, ssd,os, min_price)
maxPrice_Clean_Training2 <- clean6 %>%
select(brand, touchscreen, screen_size, weight, ram, storage, dkeyboard, ssd,os, max_price)
minPrice_Clean_Training3 <- clean6 %>%
select(brand, touchscreen, screen_size, weight, ram, storage, dkeyboard, ssd,os, min_price)
set.seed(123) #For reproducibility
train.control <- trainControl(method = "repeatedcv", savePredictions = "final",
number = 10, repeats = 3)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training2,
method = "parRF", trControl = train.control, metric = "MAE")
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training3,
method = "parRF", trControl = train.control, metric = "MAE")
mean(abs(actual_max_price$max_price-model7_max$pred)+abs(actual_min_price$min_price-model7_min$pred))
model7_max$pred
print(model7_max$results)
postResample(pred = model7_max$pred, obs = actual_max_price$max_price)
mean(abs(model7_max$pred$obs-model7_max$pred$pred))
train_max <- data.frame(predict(model7_max, type = "raw"))
names(train_max) <- "train_max"
train_min <- data.frame(predict(model7_min, type = "raw"))
names(train_min) <- "train_min"
#Model 7
mean(abs(actual_max_price$max_price-train_max$train_max)+abs(actual_min_price$min_price-train_min$train_min))
model7_max$pred[,rowIndex == 2]
model7_max$pred[rowIndex == 2]
model7_max$pred[which(rowIndex == 2)]
model7_max$pred[which(rowIndex == 2),]
model7_max$pred[which(model7max$rowIndex == 2),]
model7_max$pred[,which(model7max$rowIndex == 2)]
model7_max$pred[,model7max$rowIndex == 2]
model7_max$pred[,model7max$rowIndex == 2]
model7_max$pred[,model7max$pred$rowIndex == 2]
which(model7max$pred$rowIndex == 2)
model7_max$pred[model7_max$pred$rowIndex == 2]
model7_max$pred[,model7_max$pred$rowIndex == 2]
model7_max$pred[model7_max$pred$rowIndex == 2,]
train_max
summary(model7_max)
names(model7_max)
postResample(pred = model7_max$pred, obs = actual_max_price$max_price)
print(min(model7_max$results$MAE+model7_min$results$MAE)) # <---------------BEST MODEL SO FAR
model7_max$pred
model7_min$pred
model7_max$pred
model6_max$pred
model7_max$pred[model7_max$pred$rowIndex == 2,]
model6_max$pred[model7_max$pred$rowIndex == 2,]
model7_max$pred[model7_max$pred$rowIndex == 2,]
model6_max$pred[model6_max$pred$rowIndex == 2,]
model7_max$pred[order(model7_max$pred$rowIndex),]
set.seed(123) #For reproducibility
train.control <- trainControl(method = "repeatedcv", savePredictions = "final",
number = 20, repeats = 3)
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "parRF", trControl = train.control, metric = "MAE")
model7_max$pred[order(model7_max$pred$rowIndex),]
model6_max$pred[order(model6_max$pred$rowIndex),]
mean(abs((model7_max$pred$obs[order(model7_max$pred$rowIndex),]*3/4+model6_max$pred$obs[order(model6_max$pred$rowIndex),]*1/4)-(model7_max$pred$pred[order(model7_max$pred$rowIndex),]*3/4+model6_max$pred$pred[order(model6_max$pred$rowIndex),]*1/4)))
model7_max$pred$obs[order(model7_max$pred$rowIndex),]
model7_max$pred[order(model7_max$pred$rowIndex),model7_max$pred$obs]
model7_max$pred$obs
model7_max$pred$obs[order(model7_max$pred$rowIndex)]
mean(abs((model7_max$pred$obs[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$obs[order(model6_max$pred$rowIndex)]*1/4)-(model7_max$pred$pred[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$pred[order(model6_max$pred$rowIndex)]*1/4)))
e1 <- mean(abs((model7_max$pred$obs[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$obs[order(model6_max$pred$rowIndex)]*1/4)-(model7_max$pred$pred[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$pred[order(model6_max$pred$rowIndex)]*1/4)))
e2 <- mean(abs((model7_min$pred$obs[order(model7_min$pred$rowIndex)]*3/4+model6_min$pred$obs[order(model6_min$pred$rowIndex)]*1/4)-(model7_min$pred$pred[order(model7_min$pred$rowIndex)]*3/4+model6_min$pred$pred[order(model6_min$pred$rowIndex)]*1/4)))
e1 + e2
print(min(model7_max$results$MAE+model7_min$results$MAE)) # <---------------BEST MODEL SO FAR
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
library(caretEnsemble)
library(pdp)
library(vip)
vip(model7_max, bar = FALSE, horizontal = FALSE, size = 1.5)
vip(model7_max, bar = FALSE, horizontal = FALSE, size = 1.5)
# Training control definition
set.seed(123) #For reproducibility
train.control <- trainControl(method = "repeatedcv", savePredictions = "final",
number = 20, repeats = 3)
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
vip(model7_max, bar = FALSE, horizontal = FALSE, size = 1.5)
vip(model7_max, bar = FALSE, horizontal = FALSE, size = 1)
vip(model7_max, bar = FALSE, horizontal = T, size = 1,5)
vip(model7_max, bar = FALSE, horizontal = T, las=1)
vip(model7_max, bar = FALSE, horizontal = T, las=0.5)
vip(model7_max, bar = FALSE, horizontal = T, las=2)
vip(model7_max, bar = T, horizontal = T, las=1)
vip(model7_max, bar = F, horizontal = F, las=1)
vip(model7_max, bar = F, horizontal = T, las=1)
names(model7_max)
model7_max$coefnames
model7_max$coefnames$osWindows
model7_max$finalModel
model7_max$variable.importance
model7_max$modelInfo
vi(model7_max)
vi(model6_max)
vip(model7_max, bar = T, horizontal = T, las=1)
vip(model7_max, bar = T, horizontal = T, las=1, main = "Variable importance PRF for max_price")
vip(model7_max, bar = T, horizontal = T, las=1)
vip(model6_max, bar = T, horizontal = T, las=1)
vip(model7_min, bar = T, horizontal = T, las=1)
vip(model6_min, bar = T, horizontal = T, las=1)
vi(model7_max)
vi(model6_max)
vi(model7_min)
vi(model6_min)
vi(model7_max)*3/4
vi(model7_max*3/4)
vi(model7_max)
vi(model6_max)
vi(model7_min)
vi(model6_min)
partialPlot(model7_max, pred.data = maxPrice_Clean_Training, x.var = "base_name_mean_max")
partial(model7_max, pred.data = maxPrice_Clean_Training, x.var = "base_name_mean_max")
library(ggplot2)
p2 <- partial(model7_max, pred.var = "base_name_mean_max", plot = TRUE,
plot.engine = "ggplot2")
p2
partial(model7_max, pred.var = "cpu_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model7_max, pred.var = "gpu_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model6_max, pred.var = "base_name_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model6_max, pred.var = "cpu_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model6_max, pred.var = "gpu_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model7_min, pred.var = "base_name_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model7_min, pred.var = "cpu_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model7_min, pred.var = "gpu_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model6_min, pred.var = "base_name_mean_max", plot = TRUE,
plot.engine = "ggplot2")
partial(model6_min, pred.var = "cpu_mean_max", plot = TRUE,
plot.engine = "ggplot2")
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
library(caretEnsemble)
library(pdp)
library(vip)
library(ggplot2)
set.seed(123) #For reproducibility
train.control <- trainControl(method = "repeatedcv", savePredictions = "final",
number = 10, repeats = 3)
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
model7_max$results$MAE
mean(abs(model7_max$pred$obs[order(model7_max$pred$rowIndex)]-(model7_max$pred$pred[order(model7_max$pred$rowIndex)])))
model7_max$results$MAESD
sd(abs(model7_max$pred$obs[order(model7_max$pred$rowIndex)]-(model7_max$pred$pred[order(model7_max$pred$rowIndex)])))
write.csv(model7_max$pred, file = "Prueba2.csv", row.names = F)
nuevo <- model7_max$pred %>% group_by(model7_max$pred$Resample) %>% summarise(mean(abs(model7_max$pred$obs-model7_max$pred$pred)))
nuevo
nuevo <- model7_max$pred %>% group_by(model7_max$pred$Resample) %>% summarise(MAE = mean(abs(model7_max$pred$obs-model7_max$pred$pred)))
nuevo
View(nuevo)
nuevo <- model7_max$pred %>% mutate(error = abs(model7_max$pred$obs-model7_max$pred$pred)) %>%
group_by(model7_max$pred$Resample) %>% summarise(MAE = mean(error))
nuevo
mean(nuevo)
sd(nuevo)
mean(nuevo$MAE)
sd(nuevo$MAE)
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
order(model7_max$pred$rowIndex)
model7_max$pred[order(model7_max$pred$rowIndex)]
model7_max$pred[order(model7_max$pred$rowIndex),]
model6_max$pred[order(model6_max$pred$rowIndex),]
modelo_nuevo <- cbind(model7_max$pred$pred[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$pred[order(model6_max$pred$rowIndex)]*1/4, model7_max$pred$obs[order(model7_max$pred$rowIndex)], model7_max$pred$Resample[order(model7_max$pred$rowIndex)])
names(modelo_nuevo) <- c("pred", "obs", "Resample")
modelo_nuevo
class(modelo_nuevo)
modelo_nuevo <- cbind(data.frame(model7_max$pred$pred[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$pred[order(model6_max$pred$rowIndex)]*1/4), data.frame(model7_max$pred$obs[order(model7_max$pred$rowIndex)]), data.frame(model7_max$pred$Resample[order(model7_max$pred$rowIndex)]))
names(modelo_nuevo) <- c("pred", "obs", "Resample")
class(modelo_nuevo)
modelo_nuevo
nuevo <- modelo_nuevo %>% mutate(error = abs(modelo_nuevo$obs-modelo_nuevo$pred)) %>%
group_by(modelo_nuevo$Resample) %>% summarise(MAE = mean(error))
mean(nuevo$MAE)
sd(nuevo$MAE)
var(nuevo$MAE)
modelo_nuevo2 <- cbind(data.frame(model7_min$pred$pred[order(model7_min$pred$rowIndex)]*3/4+model6_min$pred$pred[order(model6_min$pred$rowIndex)]*1/4), data.frame(model7_min$pred$obs[order(model7_min$pred$rowIndex)]), data.frame(model7_min$pred$Resample[order(model7_min$pred$rowIndex)]))
names(modelo_nuevo2) <- c("pred", "obs", "Resample")
nuevo2 <- modelo_nuevo2 %>% mutate(error = abs(modelo_nuevo2$obs-modelo_nuevo2$pred)) %>%
group_by(modelo_nuevo2$Resample) %>% summarise(MAE = mean(error))
mean(nuevo2$MAE)
var(nuevo2$MAE)
set.seed(123) #For reproducibility
train.control <- trainControl(method = "repeatedcv", savePredictions = "final",
number = 5, repeats = 3)
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
modelo_nuevo2 <- cbind(data.frame(model7_min$pred$pred[order(model7_min$pred$rowIndex)]*3/4+model6_min$pred$pred[order(model6_min$pred$rowIndex)]*1/4), data.frame(model7_min$pred$obs[order(model7_min$pred$rowIndex)]), data.frame(model7_min$pred$Resample[order(model7_min$pred$rowIndex)]))
names(modelo_nuevo2) <- c("pred", "obs", "Resample")
nuevo2 <- modelo_nuevo2 %>% mutate(error = abs(modelo_nuevo2$obs-modelo_nuevo2$pred)) %>%
group_by(modelo_nuevo2$Resample) %>% summarise(MAE = mean(error))
mean(nuevo2$MAE)
var(nuevo2$MAE)
modelo_nuevo <- cbind(data.frame(model7_max$pred$pred[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$pred[order(model6_max$pred$rowIndex)]*1/4), data.frame(model7_max$pred$obs[order(model7_max$pred$rowIndex)]), data.frame(model7_max$pred$Resample[order(model7_max$pred$rowIndex)]))
names(modelo_nuevo) <- c("pred", "obs", "Resample")
nuevo <- modelo_nuevo %>% mutate(error = abs(modelo_nuevo$obs-modelo_nuevo$pred)) %>%
group_by(modelo_nuevo$Resample) %>% summarise(MAE = mean(error))
mean(nuevo$MAE)
var(nuevo$MAE)
set.seed(123) #For reproducibility
train.control <- trainControl(method = "repeatedcv", savePredictions = "final",
number = 20, repeats = 3)
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "xgbTree", trControl = train.control, metric = "MAE", importance = T)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training2,
method = "parRF", trControl = train.control, metric = "MAE", importance = T)
modelo_nuevo <- cbind(data.frame(model7_max$pred$pred[order(model7_max$pred$rowIndex)]*3/4+model6_max$pred$pred[order(model6_max$pred$rowIndex)]*1/4), data.frame(model7_max$pred$obs[order(model7_max$pred$rowIndex)]), data.frame(model7_max$pred$Resample[order(model7_max$pred$rowIndex)]))
names(modelo_nuevo) <- c("pred", "obs", "Resample")
nuevo <- modelo_nuevo %>% mutate(error = abs(modelo_nuevo$obs-modelo_nuevo$pred)) %>%
group_by(modelo_nuevo$Resample) %>% summarise(MAE = mean(error))
mean(nuevo$MAE)
var(nuevo$MAE)
modelo_nuevo2 <- cbind(data.frame(model7_min$pred$pred[order(model7_min$pred$rowIndex)]*3/4+model6_min$pred$pred[order(model6_min$pred$rowIndex)]*1/4), data.frame(model7_min$pred$obs[order(model7_min$pred$rowIndex)]), data.frame(model7_min$pred$Resample[order(model7_min$pred$rowIndex)]))
names(modelo_nuevo2) <- c("pred", "obs", "Resample")
nuevo2 <- modelo_nuevo2 %>% mutate(error = abs(modelo_nuevo2$obs-modelo_nuevo2$pred)) %>%
group_by(modelo_nuevo2$Resample) %>% summarise(MAE = mean(error))
mean(nuevo2$MAE)
var(nuevo2$MAE)
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
library(caretEnsemble)
library(pdp)
library(vip)
library(ggplot2)
modelo_nuevo <- cbind(data.frame(model7_max$pred$pred[order(model7_max$pred$rowIndex)]), data.frame(model7_max$pred$obs[order(model7_max$pred$rowIndex)]), data.frame(model7_max$pred$Resample[order(model7_max$pred$rowIndex)]))
names(modelo_nuevo) <- c("pred", "obs", "Resample")
nuevo <- modelo_nuevo %>% mutate(error = abs(modelo_nuevo$obs-modelo_nuevo$pred)) %>%
group_by(modelo_nuevo$Resample) %>% summarise(MAE = mean(error))
mean(nuevo$MAE)
var(nuevo$MAE)
sd(nuevo$MAE)
model7_max$results$MAESD
#---------Load Libraries ------------------------------------
#install.packages("caretEnsemble")
install.packages("iml")
library(iml)
X1 <- maxPrice_Clean_Training[-max_price]
X1 <- maxPrice_Clean_Training[which(names(maxPrice_Clean_Training)) != "max_price"]
X1 <- maxPrice_Clean_Training[which(names(maxPrice_Clean_Training) != "max_price")]
View(X1)
interact1 <- Interaction$new(predictor1)
plot(interact1)
predictor1 <- Predictor$new(model7_max, data = X1, y=maxPrice_Clean_Training$max_price)
interact1 <- Interaction$new(predictor1)
plot(interact1)
predictor1 <- Predictor$new(model7_max, data = X1, y=maxPrice_Clean_Training$max_price)
interact1 <- Interaction$new(predictor1)
plot(interact1)
interact1
predictor2 <- Predictor$new(model6_max, data = X1, y=maxPrice_Clean_Training$max_price)
interact2 <- Interaction$new(predictor2)
interact2 <- Interaction$new(predictor2)
plot(interact2)
class(interact1)
View(interact1)
interact1 + interact2
names(interact1)
interact1$results
interact1$results + interact2$results
interact2$results
names(interact1$results)
X2 <- minPrice_Clean_Training2[which(names(minPrice_Clean_Training2) != "min_price")]
predictor1min <- Predictor$new(model7_min, data = X2, y=minPrice_Clean_Training2$min_price)
predictor2min <- Predictor$new(model6_min, data = X2, y=minPrice_Clean_Training2$min_price)
interact1min <- Interaction$new(predictor1min)
interact2min <- Interaction$new(predictor2min)
plot(interact1min)
plot(interact2min)
id_train <- clean6 %>% select(id)
train_max7 <- data.frame(predict(model7_max, type = "raw"))
names(train_max7) <- "train_max"
prueba7 <-cbind(id_train,train_max7)
write.csv(prueba7, file = "PRF on training.csv", row.names = F)
train_max6 <- data.frame(predict(model6_max, type = "raw"))
names(train_max6) <- "train_max"
prueba6 <-cbind(id_train,train_max6)
write.csv(prueba6, file = "XGBoost on training.csv", row.names = F)
modelo_nuevo1 <- cbind(data.frame(model7_max$pred$pred[order(model7_max$pred$rowIndex)]), data.frame(model7_max$pred$obs[order(model7_max$pred$rowIndex)]), data.frame(model7_max$pred$Resample[order(model7_max$pred$rowIndex)]))
names(modelo_nuevo1) <- c("pred", "obs", "Resample")
write.csv(modelo_nuevo1, file = "PRF on training.csv", row.names = F)
modelo_nuevo2 <- cbind(data.frame(model6_max$pred$pred[order(model6_max$pred$rowIndex)]), data.frame(model6_max$pred$obs[order(model6_max$pred$rowIndex)]), data.frame(model6_max$pred$Resample[order(model6_max$pred$rowIndex)]))
names(modelo_nuevo2) <- c("pred", "obs", "Resample")
write.csv(modelo_nuevo2, file = "XGBoost on training.csv", row.names = F)
