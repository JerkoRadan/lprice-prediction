perc_var_pred8 <- data.frame(predict(model8_perc_varPrice, type = "raw"))
max_price_perc_pred1 <- min_price_pred*(1+perc_var_pred1)
names(max_price_perc_pred1) <- "max_price_pred"
max_price_perc_pred2 <- min_price_pred*(1+perc_var_pred2)
names(max_price_perc_pred2) <- "max_price_pred"
max_price_perc_pred3 <- min_price_pred*(1+perc_var_pred3)
names(max_price_perc_pred3) <- "max_price_pred"
max_price_perc_pred4 <- min_price_pred*(1+perc_var_pred4)
names(max_price_perc_pred4) <- "max_price_pred"
max_price_perc_pred5 <- min_price_pred*(1+perc_var_pred5)
names(max_price_perc_pred5) <- "max_price_pred"
max_price_perc_pred6 <- min_price_pred*(1+perc_var_pred6)
names(max_price_perc_pred6) <- "max_price_pred"
max_price_perc_pred7 <- min_price_pred*(1+perc_var_pred7)
names(max_price_perc_pred7) <- "max_price_pred"
max_price_perc_pred8 <- min_price_pred*(1+perc_var_pred8)
names(max_price_perc_pred8) <- "max_price_pred"
mean(abs(actual_max_price$max_price-max_price_perc_pred1$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred2$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred3$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred4$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred5$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred6$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred)) #Best model MAE=81.18 (model7)
mean(abs(actual_max_price$max_price-max_price_perc_pred8$max_price_pred))
MAE_price_var7 <- mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred))
print(min(model7_max$results$MAE)+MAE_price_var7)
print(min(model7_max$results$MAE)+MAE_price_var7)
MAE_price_perc_var7 <- mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred))
print(min(model7_max$results$MAE)+MAE_price_perc_var7)
MAE_price_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_max$results$MAE)+MAE_price_var7)
bothModels2 <- list(model7_min ,model7_perc_varPrice)
pred_prev <- data.frame(predict(bothModels, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("MIN","Price_perc_dif")
pred_prev
pred <- pred_prev %>% select(MIN, MIN*(1+Price_perc_dif))
bothModels2 <- list(model7_min ,model7_perc_varPrice)
pred_prev <- data.frame(predict(bothModels2, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("MIN","Price_perc_dif")
pred_prev
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN*(1+pred_prev$Price_perc_dif))
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 4(Parallel Random Forest with percentage variation).csv", row.names = F)
bothModels3 <- list(model7_min ,model7_varPrice)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("MIN","Price_dif")
pred_prev
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev$Price_dif)
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 5(Parallel Random Forest with price variation).csv", row.names = F)
model1_varPrice$results$MAE
model2_varPrice$results$MAE
model3_varPrice$results$MAE
min(model4_varPrice$results$MAE) #This is the best model for the variation, but not the best for max_price
min(model5_varPrice$results$MAE)
min(model6_varPrice$results$MAE)
min(model7_varPrice$results$MAE)
min(model8_varPrice$results$MAE)
mean(abs(actual_max_price$max_price-max_price_pred1$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred2$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred3$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred4$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred5$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred6$max_price_pred))
mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred)) #Best model MAE=81.18 (model7)
mean(abs(actual_max_price$max_price-max_price_pred8$max_price_pred))
max_price_pred4$max_price_pred
max_price_pred7$max_price_pred
max_price_pred4$max_price_pred
bothModels3 <- list(model7_min ,model4_varPrice)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Elastic net (glm)
names(pred_prev) <- c("MIN","Price_dif")
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev$Price_dif)
pred
# ----- Export to a file ------
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 6(Parallel Random Forest with price variation EGLM).csv", row.names = F)
pred_prev
pred_prev <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest
pred_prev <- data.frame(predict(model4_varPrice, Price_NormTest, type = "raw")) #Elastic net (glm)
names(pred_prev) <- c("MIN","Price_dif")
pred <- pred_prev %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev$Price_dif)
pred
pred_prev1 <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest
pred_prev2 <- data.frame(predict(model4_varPrice, Price_NormTest, type = "raw")) #Elastic net (glm)
pred_prev1
pred_prev2
names(pred_prev1) <- "MIN"
names(pred_prev2) <- "Price_dif"
pred <- pred_prev1 %>% select(MIN)
pred <- pred %>% mutate(MAX = MIN+pred_prev2$Price_dif)
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 6(Parallel Random Forest with price variation EGLM).csv", row.names = F)
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 10, repeats = 3)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
bothModels <- list(model7_min ,model7_max)
pred <- data.frame(predict(bothModels, Price_Test, type = "raw")) #Parallel Random Forest
names(pred) <- c("MIN","MAX")
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 7(Parallel Random Forest K=10).csv", row.names = F)
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
max_price_pred <- data.frame(predict(model7_max, type = "raw"))
min_price_pred7 <- max_price_pred+var_pred7
names(min_price_pred7) <- "min_price_pred"
mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred))
min_price_pred7 <- max_price_pred-var_pred7
names(min_price_pred7) <- "min_price_pred"
mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred)) #Worse result using
MAE_maxprice_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_var7) #Using min_price as base price
MAE_minprice_var7 <- mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred))
print(min(model7_max$results$MAE)+MAE_minprice_var7) #Using min_price as base price
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
min_price_pred <- data.frame(predict(model7_min, type = "raw"))
max_price_pred <- data.frame(predict(model7_max, type = "raw"))
min_price_pred7 <- max_price_pred-var_pred7
names(min_price_pred7) <- "min_price_pred"
mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred)) #Best model MAE=81.18 (using min_price as base price)
mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred)) #MAE = 75.74585 (using max_price as base price)
MAE_maxprice_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_var7) #Using min_price as base price
MAE_minprice_var7 <- mean(abs(actual_min_price$min_price-min_price_pred7$min_price_pred))
print(min(model7_max$results$MAE)+MAE_minprice_var7) #Using max_price as base price
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("Price_dif", "MAX")
pred <- pred_prev %>% mutate(MIN = pred_prev$MAX - pred_prev$Price_perc_dif)
othModels3 <- list(model7_varPrice, model7_max)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("Price_dif", "MAX")
pred <- pred_prev %>% mutate(MIN = pred_prev$MAX - pred_prev$Price_dif)
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev) <- c("Price_dif", "MAX")
pred <- pred_prev %>% mutate(MIN = pred_prev$MAX - pred_prev$Price_dif)
pred
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- pred_prev3 %>% mutate(MIN = pred_prev3$MAX - pred_prev3$Price_dif)
pred3
pred_prev3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
pred3
names(pred3) <- "MIN"
pred3 <- pred_prev3 %>% select(MAX)
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3 <- pred_prev3$MAX
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX =pred_prev3$MAX)
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3['MAX'] <- pred_prev3$MAX
pred3
pred3 <- pred_prev3$MAX - pred_prev3$Price_dif
names(pred3) <- "MIN"
pred3
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3
pred3 <- pred_prev3 %>% select(MAX)
pred3
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred_prev3 %>% mutate(MAX = MAX)
pred3
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
# Training control definition
set.seed(123)
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
#--------Models for maxPrice with Normalized data (except decision tree models) -----------------
#Features: brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,
#          cpu_benchmark_score, gpu_benchmark_score
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
View(Price_Test)
bothModels3 <- list(model7_varPrice, model7_max)
pred_prev3 <- data.frame(predict(bothModels3, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev3) <- c("Price_dif", "MAX")
pred3 <- data.frame(pred_prev3$MAX - pred_prev3$Price_dif)
names(pred3) <- "MIN"
pred3 <- pred3 %>% mutate(MAX = pred_prev3$MAX)
pred3
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 8(PRF with price variation base on max_price).csv", row.names = F)
results <- cbind(id_test,pred3)
results
write.csv(results, file = "Model 8(PRF with price variation base on max_price).csv", row.names = F)
print(min(model7_max$results$MAE)+MAE_minprice_var7) #Using max_price as base price
abs(actual_min_price$min_price-min_price_pred7$min_price_pred)
print(min(model7_min$results$MAE)+MAE_price_perc_var7) #Best model
print(min(model7_min$results$MAE)+MAE_maxprice_perc_var7) #Best model
MAE_maxprice_perc_var7 <- mean(abs(actual_max_price$max_price-max_price_perc_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_perc_var7) #Best model
MAE_maxprice_var7 <- mean(abs(actual_max_price$max_price-max_price_pred7$max_price_pred))
print(min(model7_min$results$MAE)+MAE_maxprice_var7) #Using min_price as base price
min_price_perc_pred7 <- max_price_perc_pred-perc_var_pred7
names(min_price_perc_pred7) <- "min_price_pred"
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
min_price_pred <- data.frame(predict(model7_min, type = "raw"))
max_price_pred <- data.frame(predict(model7_max, type = "raw"))
min_price_perc_pred7 <- max_price_perc_pred-perc_var_pred7
names(min_price_perc_pred7) <- "min_price_pred"
# Price percentage variation base on min_price
clean6 <- clean6 %>%
mutate(price_percentage_variation_min = (max_price - min_price)/min_price)
# Price percentage variation base on max_price
clean6 <- clean6 %>%
mutate(price_percentage_variation_max = (max_price - min_price)/max_price)
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
# Price percentage variation base on min_price
clean6 <- clean6 %>%
mutate(price_percentage_variation_min = (max_price - min_price)/min_price)
# Price percentage variation base on max_price
clean6 <- clean6 %>%
mutate(price_percentage_variation_max = (max_price - min_price)/max_price)
# For price_percentage_variation based on min_price
percentage_varPrice_prev_min <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation_min)
percentage_varPrice_Training_min <- data.frame(model.matrix(~., data=percentage_varPrice_prev_min))
# For price_percentage_variation based on max_price
percentage_varPrice_prev_max <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation_max)
percentage_varPrice_Training_max <- data.frame(model.matrix(~., data=percentage_varPrice_prev_max))
# For price_percentage_variation based on min_price
percentage_varPriceNorm_prev_min <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation_min)
percentage_varPriceNorm_Training_min <- data.frame(model.matrix(~., data=percentage_varPrice_prev_min))
# For price_percentage_variation based on max_price
percentage_varPriceNorm_prev_max <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation_max)
percentage_varPriceNorm_Training_max <- data.frame(model.matrix(~., data=percentage_varPrice_prev_max))
index_Response <- match(c("max_price", "min_price", "price_variation", "price_percentage_variation_min","price_percentage_variation_max"), names(clean6))
preProcValues <- preProcess(clean6[-index_Response], method = "range")
trainScaled <- predict(preProcValues, clean6)
glimpse(trainScaled)
testScaled <- predict(preProcValues, clean_test3)
glimpse(testScaled)
# For price_percentage_variation based on min_price
percentage_varPriceNorm_prev_min <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation_min)
percentage_varPriceNorm_Training_min <- data.frame(model.matrix(~., data=percentage_varPrice_prev_min))
# For price_percentage_variation based on max_price
percentage_varPriceNorm_prev_max <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, price_percentage_variation_max)
percentage_varPriceNorm_Training_max <- data.frame(model.matrix(~., data=percentage_varPrice_prev_max))
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_perc_varPrice_max <- train(price_percentage_variation_max ~ . , data = percentage_varPrice_Training_max,
method = "parRF", trControl = train.control, metric = "MAE")
perc_var_pred7_max <- data.frame(predict(model7_perc_varPrice_max, type = "raw"))
min_price_perc_pred7 <- max_price_pred*(1-perc_var_pred7_max)
names(min_price_perc_pred7) <- "min_price_pred"
MAE_minprice_perc_var7 <- mean(abs(actual_min_price$min_price-min_price_perc_pred7$min_price_pred))
print(min(model7_max$results$MAE)+MAE_minprice_perc_var7) #Using min_price as base price (229.9546)
histogram(clean6$price_variation)
hist(clean6$price_variation)
table(clean6$price_variation)
View(clean6)
hist(clean6$price_percentage_variation_min)
table(clean6$price_percentage_variation_min)
View(clean6)
clean6$id == 8789
clean6[clean6$id == 8789 |clean6$id == 20741]
clean6[clean6$id == 8789 |clean6$id == 20741,]
hist(var_pred7)
hist(predict(model7_varPrice, type = "raw"))
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
clean6 <- clean6 %>%
mutate(ave_price = (max_price + min_price)/2)
#---- Data not normalized -----
# For price_variation
avePrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, ave_price)
avePrice_Clean_Training <- data.frame(model.matrix(~., data=avePrice_Clean_Training_prev))
#------ Normalized data--------
# For price_variation
avePrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, ave_price)
avePrice_Norm_Training <- data.frame(model.matrix(~., data=avePrice_Norm_Training_prev))
#------ Models (price variation) -----------
##### Train the model 1 (Linear regression)
model1_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
#---- Data not normalized -----
# For price_variation
avePrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, ave_price)
avePrice_Clean_Training <- data.frame(model.matrix(~., data=avePrice_Clean_Training_prev))
#------ Normalized data--------
# For price_variation
avePrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, ave_price)
avePrice_Norm_Training <- data.frame(model.matrix(~., data=avePrice_Norm_Training_prev))
#------ Models (price variation) -----------
##### Train the model 1 (Linear regression)
model1_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
index_Response <- match(c("max_price", "min_price", "price_variation", "price_percentage_variation_min","price_percentage_variation_max", "ave_price"), names(clean6))
preProcValues <- preProcess(clean6[-index_Response], method = "range")
trainScaled <- predict(preProcValues, clean6)
glimpse(trainScaled)
#---- Data not normalized -----
# For price_variation
avePrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, ave_price)
avePrice_Clean_Training <- data.frame(model.matrix(~., data=avePrice_Clean_Training_prev))
#------ Normalized data--------
# For price_variation
avePrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,cpu_benchmark_score,gpu_benchmark_score, ave_price)
avePrice_Norm_Training <- data.frame(model.matrix(~., data=avePrice_Norm_Training_prev))
#------ Models (price variation) -----------
##### Train the model 1 (Linear regression)
model1_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_avePrice <- train(ave_price ~ . , data = avePrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_avePrice <- train(ave_price ~ . , data = avePrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
model1_avePrice$results$MAE
model2_avePrice$results$MAE
model3_avePrice$results$MAE
min(model4_avePrice$results$MAE)
min(model5_avePrice$results$MAE)
min(model6_avePrice$results$MAE)
min(model7_avePrice$results$MAE)
min(model8_avePrice$results$MAE)
model1_varPrice$results$MAE
model2_varPrice$results$MAE
model3_varPrice$results$MAE
min(model4_varPrice$results$MAE) #This is the best model for the variation, but not the best for max_price
min(model5_varPrice$results$MAE)
min(model6_varPrice$results$MAE)
min(model7_varPrice$results$MAE)
min(model8_varPrice$results$MAE)
actual_max_price <- maxPrice_Clean_Training %>% select(max_price)
actual_min_price <- minPrice_Clean_Training %>% select(min_price)
ave_pred7 <- data.frame(predict(model7_avePrice, type = "raw"))
#Based on price variation model 4
min_aveprice_pred4 <- ave_pred7-(var_pred4/2)
names(min_aveprice_pred4) <- "min_price_pred"
max_aveprice_pred4 <- ave_pred7+(var_pred4/2)
names(max_aveprice_pred4) <- "max_price_pred"
#Based on price variation model 5
min_aveprice_pred5 <- ave_pred7-(var_pred5/2)
names(min_aveprice_pred5) <- "min_price_pred"
max_aveprice_pred5 <- ave_pred7+(var_pred5/2)
names(max_aveprice_pred5) <- "max_price_pred"
#Based on price variation model 7
min_aveprice_pred7 <- ave_pred7-(var_pred7/2)
names(min_aveprice_pred7) <- "min_price_pred"
max_aveprice_pred7 <- ave_pred7+(var_pred7/2)
names(max_aveprice_pred7) <- "max_price_pred"
#Based on price variation model 8
min_aveprice_pred8 <- ave_pred7-(var_pred8/2)
names(min_aveprice_pred8) <- "min_price_pred"
max_aveprice_pred8 <- ave_pred7+(var_pred8/2)
names(max_aveprice_pred8) <- "max_price_pred"
mean(abs(actual_max_price$max_price-max_aveprice_pred4$max_price_pred))+ mean(abs(actual_min_price$min_price-min_aveprice_pred4$min_price_pred))
mean(abs(actual_max_price$max_price-max_aveprice_pred5$max_price_pred))+ mean(abs(actual_min_price$min_price-min_aveprice_pred5$min_price_pred))
mean(abs(actual_max_price$max_price-max_aveprice_pred7$max_price_pred))+ mean(abs(actual_min_price$min_price-min_aveprice_pred7$min_price_pred))
mean(abs(actual_max_price$max_price-max_aveprice_pred8$max_price_pred))+ mean(abs(actual_min_price$min_price-min_aveprice_pred8$min_price_pred))
bothModels4 <- list(model7_varPrice, model7_avePrice)
pred_prev4 <- data.frame(predict(bothModels4, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_prev4) <- c("Price_dif", "Price_average")
pred4 <- data.frame(pred_prev4$Price_average - (pred_prev4$Price_dif/2))
names(pred4) <- "MIN"
pred4 <- pred4 %>% mutate(MAX = pred_prev4$Price_average + (pred_prev4$Price_dif/2))
pred4
results <- cbind(id_test,pred4)
results
write.csv(results, file = "Model 9(PRF with price average and variation).csv", row.names = F)
table(clean6$brand)
table(clean_test3$brand)
aggr(x=test_df[,6:20])
aggr(x = clean2[,8:20])
rown_four_nulls <- as.integer(rownames(train_df[rowSums(is.na(train_df[])) == 4,]))
rown_four_nulls
gg_miss_case(train_df)
gg_miss_var(train_df)
mean(abs(actual_max_price$max_price-max_aveprice_pred7$max_price_pred))+ mean(abs(actual_min_price$min_price-min_aveprice_pred7$min_price_pred)) #Best model
