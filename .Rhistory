#training_subset =subset(clean3_knn,sample ==TRUE)
#test_subset = subset(clean3_knn,sample ==FALSE)
###################################Prepare Test Data###########################################################
colnames(test_df)[12] <- "dkeyboard"
colnames(test_df)[1] <- "id"
glimpse(test_df)
sum(is.na(test_df))
aggr(x=test_df[,6:20])
clean_test <- test_df
##------------Knn imputation of tet data---------------------------------------
clean_test_knn <- knnImputation(clean_test)
aggr(x=clean_test_knn)
##----------------Screen Surface for Test Data------------------------
clean_test_knn$screen_surface <- tolower(clean_test_knn$screen_surface)
##----------------Screen Resolution for TEST DATA--------------------------------------------
#---outlier width and lenght----------------------
clean_test1<-clean_test_knn
clean_test1[133,"pixels_x"] <- 1366
clean_test1[133,"pixels_y"] <- 768
clean_test1[203,"pixels_x"] <- 1366
clean_test1[203,"pixels_y"] <- 768
clean_test1 <- clean_test1 %>%
mutate(resolution = NA)
clean_test1 <- clean_test1 %>%
mutate(resolution= ifelse(pixels_x==1366 & pixels_y==768,"HD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1600 & pixels_y==900,"HD+",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1080,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2304 & pixels_y==1440,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2560 & pixels_y==1440,"QHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2560 & pixels_y==1600,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2880 & pixels_y==1800,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3000 & pixels_y==2000,"PixelSense",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3200 & pixels_y==1800,"QHD+",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3840 & pixels_y==2160,"UHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1280,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2160 & pixels_y==1440,"FHD+",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1280 & pixels_y==800,"HD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1280,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2400 & pixels_y==1600,"QHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2736 & pixels_y==1824,"UHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3072 & pixels_y==1920,"Retina",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1920 & pixels_y==1200,"FHD",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2256 & pixels_y==1504,"PixelSense",resolution)) %>%
mutate(resolution= ifelse(pixels_x==2736 & pixels_y==1824,"PixelSense",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1440 & pixels_y==900,"airhd",resolution)) %>%
mutate(resolution= ifelse(pixels_x==3240 & pixels_y==2160,"PixelSense",resolution)) %>%
mutate(resolution= ifelse(pixels_x==1800 & pixels_y==1200,"PixelSense",resolution))
##------------------Screen Size for TEST DATA---------------------------------------------------
clean_test1 <- clean_test1 %>%
mutate(screen_size_fact= ifelse(screen_size>=10 & screen_size<=10.7,10,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=10.8 & screen_size<=11.7,11,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=11.8 & screen_size<=12.6,12,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=12.7 & screen_size<=13.6,13,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=13.7 & screen_size<=14.6,14,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=13.7 & screen_size<=14.6,14,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=14.7 & screen_size<=15.6,15,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=15.7 & screen_size<=16.6,16,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=16.7 & screen_size<=17.6,17,screen_size)) %>%
mutate(screen_size_fact= ifelse(screen_size>=17.7 & screen_size<=18.6,18,screen_size))
#--------------CPU Scores for test data -----------------------------------------
clean_test1 <-clean_test1 %>%
mutate(cpu_details,cpu_clean= gsub("\\s*(\\d[.]\\d*)\\s*(GHz|ghz|Ghz|Ghz|gHz).*","",clean_test1$cpu_details))
cpu_df<-cpu_df %>%
mutate(cpu_model,cpu_clean= gsub("\\s*([@]).*|\\s*(APU).*","",cpu_df$cpu_model))
clean_test2 <- clean_test1 %>%
left_join(cpu_df,by="cpu_clean")
clean_test2$cpu_model <- as.character(clean_test2$cpu_model)
clean_test2$cpu_benchmark_score[is.na(clean_test2$cpu_benchmark_score)] <- 500
clean_test2$cpu_model[is.na(clean_test2$cpu_model)] <- "other"
#--------------GPU Scores for test data -----------------------------------------------
clean_test3 <- mutate(clean_test2, gpu = ifelse(discrete_gpu == 0, 0,as.character(gpu)))
clean_test3<-clean_test3 %>%
mutate(gpu,gpu_model= gsub("^(\\S+\\s+\\n?){1}","",clean_test3$gpu))
gpu_df[,1] <- gsub(" with", "", gpu_df$gpu_model)
gpu_df[,1] <- gsub(" Design", "", gpu_df$gpu_model)
clean_test3$gpu_model <- gsub("GeFoce", "GeForce", clean_test3$gpu_model)
clean_test3$gpu_model <- gsub("GTX1070", "GTX 1070", clean_test3$gpu_model)
clean_test3 <- clean_test3 %>%
left_join(gpu_df,by="gpu_model")
clean_test3$gpu_benchmark_score[clean_test3$gpu_model == 0] <- 0
geforce_df <- filter(clean_test3, grepl('GeForce',clean_test3$gpu))
geforce_mean_score <- mean(geforce_df$gpu_benchmark_score, na.rm =TRUE)
clean_test3[is.na(clean_test3$gpu_benchmark_score) & grepl("GeForce",clean_test3$gpu_model),"gpu_benchmark_score"] <- geforce_mean_score
gpu_null <- clean_test3 %>%
select(gpu_model,gpu_benchmark_score) %>%
filter(is.na(clean_test3$gpu_benchmark_score))
clean_test3[is.na(clean_test3$gpu_benchmark_score),"gpu_benchmark_score"] <- mean(clean_test3$gpu_benchmark_score,na.rm=TRUE)
#--------- Base_name_for_test_data-------------------------------------------------
clean_test3$base_name <- tolower(clean_test3$base_name)
clean_test3$name <- tolower(clean_test3$name)
base_nam_test <- clean_test3 %>%
mutate(base_name_clean= base_name) %>%
mutate(base_name_clean= ifelse(grepl("asus rog gl702vs",base_name_clean),"ASUS ROG Strix GL702VS",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("asus 14 eeebook",base_name_clean),"asus eeebook 14",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("asus zenbook 3 deluxe ux490ua",base_name_clean),"asus zenbook 3",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("dell i3558-9136blk",base_name_clean),"Dell Inspiron 15.6 Touch-Screen Laptop Intel Core",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("dell g3",base_name_clean),"Dell g",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("dell g5",base_name_clean),"Dell g",base_name_clean)) %>%
mutate(base_name_clean= gsub("^.*dell xps\\S+.*","Dell xps",base_name_clean)) %>%
mutate(base_name_clean= gsub("delll","dell",base_name_clean)) %>%
mutate(base_name_clean= gsub("apple macbook pro [(]2019[)]","apple macbook pro 2019",base_name_clean)) %>%
mutate(base_name_clean= gsub("apple macbook pro 2015","apple macbook pro 2014",base_name_clean)) %>%
mutate(base_name_clean= gsub("apple macbook pro 2011","apple macbook pro 2012",base_name_clean)) %>%
mutate(base_name_clean= gsub("apple macbook 2015","apple macbook 2017",base_name_clean)) %>%
mutate(base_name_clean= gsub("microsoft surface go","microsoft surface 3",base_name_clean)) %>%
mutate(base_name_clean= gsub("asus rog gl\\d+","asus rog strix ",base_name_clean)) %>%
mutate(base_name_clean= gsub("asus zenbook 3 ","asus zenbook ",base_name_clean)) %>%
mutate(base_name_clean= gsub("dell precision","dell latitude",base_name_clean)) %>%
mutate(base_name_clean= gsub("asus vivobook pro","asus vivobook",base_name_clean)) %>%
mutate(base_name_clean= gsub("razer blade$","razer blade pro",base_name_clean)) %>%
mutate(base_name_clean= gsub("lenovo v330","lenovo chromebook",base_name_clean)) %>%
mutate(base_name_clean= gsub("lenovo 300e","lenovo chromebook",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("dell inspiron chromebook",base_name_clean),"dell chromebook",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("asus transformer mini",base_name_clean),"asus transformer book mini",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("asus l402sa",base_name_clean),"  ASUS Vivobook L402SA",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("alienware area-51m",base_name_clean),"alienware 17 r5",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("samsung chromebook xe303c12",base_name_clean),"samsung chromebook",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("acer cb3-532",base_name_clean),"acer chromebook cb3-532",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("asus c302ca-dhm4",base_name_clean),"asus chromebook c302ca-dhm4",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("acer cb3-531-c4a5",base_name_clean),"acer chromebook cb3-531-c4a5",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("acer r11",base_name_clean),"acer chromebook r11",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("asus c300sa",base_name_clean),"asus chromebook c300sa",base_name_clean)) %>%
mutate(base_name_clean= ifelse(grepl("samsung notebook flash",base_name_clean),"samsung notebook",base_name_clean))
base_nam_test <- base_nam_test %>%
mutate(base_name_clean= gsub("\\s*([(]).*|\\s*([-]).*","",base_nam_test$base_name_clean))
base_nam_test <- base_nam_test %>%
mutate(base_name_clean2= ifelse(grepl("hp",base_name) & grepl("x360",base_name),gsub("x360","flip",base_nam_test$base_name_clean),base_name_clean)) %>%
mutate(base_name_clean = base_name_clean2)
base_nam_test$base_name_clean <- tolower(base_nam_test$base_name_clean)
base_nam_test <- base_nam_test %>%
mutate(base_name_clean=ifelse(grepl("acer",base_name),str_extract(base_nam_test$base_name_clean,"^(?=.*\\bacer\\b)(?:\\S+\\s){2}|^(?=.*\\bacer\\b)(?:\\S+){1}"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("alienware",base_name),str_extract(base_nam_test$base_name_clean,"(\\S+\\s){2}|^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("alienware\\s\\D+\\d+",base_name_clean),str_extract(base_nam_test$base_name_clean,"\\S+\\s\\D+"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("asus",base_name),str_extract(base_nam_test$base_name_clean,"(\\S+\\s){2,3}|(\\S+\\s\\S+){1,2}"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("asus x5.*",base_name),"asus x5",base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("asus fx.*",base_name),"asus fx",base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("asus\\s[q]\\d+.*",base_name),"asus q",base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("dell",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){2}|^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("google",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){2}|^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("hp",base_name_clean) & !grepl("flip",base_name_clean),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){2}|^(\\S+\\s\\S+)|^(\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("hp",base_name_clean) & grepl("flip",base_name_clean),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){3}|^(\\S+\\s\\S+\\s\\S+)|^(\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("hp\\s\\d+",base_name),"hp",base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("huawei",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){2}|^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("lg",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){2}|^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("microsoft",base_name),str_extract(base_nam_test$base_name_clean,"^(\\w+\\s+){3}|^(\\S+\\s\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("msi",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s+\\D+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("prostar",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s+\\D+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("sager",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s+\\D+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("samsung",base_name),str_extract(base_nam_test$base_name_clean,"^(\\w+\\s+){3}|^(\\S+\\s\\S+\\s\\S+)|^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("samsung\\s\\S+\\s\\d+",base_name),str_extract(base_nam_test$base_name_clean,"samsung\\s\\S+"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("razer",base_name),str_extract(base_nam_test$base_name_clean,"^(\\w+\\s+){3}|^(\\S+\\s\\S+\\s\\S+)|^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("jumper",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("toshiba",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("lenovo",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){2}|^(\\S+\\s\\S+)|^(\\S+)"),base_name_clean)) %>%
mutate(base_name_clean=ifelse(grepl("rca",base_name),str_extract(base_nam_test$base_name_clean,"^(\\S+\\s){2}|^(\\S+\\s\\S+)|^(\\S+)"),base_name_clean)) %>%
select(brand,base_name,base_name_clean,name,touchscreen)
base_nam_test <- base_nam_test %>%
mutate(base_name_clean= gsub("flip","",base_name_clean))
base_nam_test$base_name_clean <- str_squish(base_nam_test$base_name_clean)
unique(base_nam_test$base_name_clean)
clean_test3$base_name_clean <- base_nam_test$base_name_clean
clean_test3$base_name_clean[!(clean_test3$base_name_clean %in% clean6$base_name_clean)]
#--------- 2-in-1 laptops - test data --------------------------------------------
clean_test3 <- clean_test3 %>%
mutate(x360 = ifelse(grepl("2-in-1",name)|grepl("x360",name)|grepl("transformer",name)|grepl("convertible",name)|grepl("flip",name)|
grepl("2-in-1",base_name)|grepl("x360",base_name)|grepl("transformer",base_name)|grepl("convertible",base_name)|grepl("flip",base_name)
,1,0))
##------------------weight for Test Data---------------------------------------------------
clean_test3 <- clean_test3 %>%
mutate(weight_clean= ifelse(weight<3,"Up to 3 Pounds",weight)) %>%
mutate(weight_clean= ifelse(weight>=3 & weight<4,"3 to 3.9 Pounds",weight_clean)) %>%
mutate(weight_clean= ifelse(weight>=4 & weight<5,"4 to 4.9 Pounds",weight_clean)) %>%
mutate(weight_clean= ifelse(weight>=5 & weight<6,"5 to 5.9 Pounds",weight_clean)) %>%
mutate(weight_clean= ifelse(weight>=6 & weight<7,"6 to 6.9 Pounds",weight_clean)) %>%
mutate(weight_clean= ifelse(weight>=7 & weight<8,"7 to 7.9 Pounds",weight_clean)) %>%
mutate(weight_clean= ifelse(weight>=8 ,"8 Pounds & Above",weight_clean))
#--------- Factorising Test Data-----------------------------------------------
clean_test3$screen_size_fact <- as.factor(clean_test3$screen_size_fact)
clean_test3$os <-as.factor(clean_test3$os)
clean_test3$resolution <- as.factor(clean_test3$resolution)
clean_test3$weight_clean <- as.factor(clean_test3$weight_clean)
#--------- Data not normalized ------------------
# Selecting only the features to use
#Features: brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,
#          cpu_benchmark_score, gpu_benchmark_score
maxPrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, max_price)
maxPrice_Clean_Training <- data.frame(model.matrix(~., data=maxPrice_Clean_Training_prev))
minPrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, min_price)
minPrice_Clean_Training <- data.frame(model.matrix(~., data=minPrice_Clean_Training_prev))
View(clean6)
index_Response <- match(c("max_price", "min_price", "price_variation", "price_percentage_variation_min","price_percentage_variation_max", "ave_price"), names(clean6))
preProcValues <- preProcess(clean6[-index_Response], method = "range")
trainScaled <- predict(preProcValues, clean6)
glimpse(trainScaled)
testScaled <- predict(preProcValues, clean_test3)
glimpse(testScaled)
# Selecting only the features to use for Normalized data
maxPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, max_price)
maxPrice_Norm_Training <- data.frame(model.matrix(~., data=maxPrice_Norm_Training_prev))
maxPrice_Norm_Training
minPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, min_price)
minPrice_Norm_Training <- data.frame(model.matrix(~., data=minPrice_Norm_Training_prev))
minPrice_Norm_Training
#------Repeated K-Fold Cross Validation (K = 20, repeats = 3)----------------
# Training control definition
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 1 (Linear regression)
model1_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
model1_max$results$MAE
model1_min$results$MAE
model2_max$results$MAE
model2_min$results$MAE
model7_max$results$MAE
model7_min$results$MAE
print(model1_max$results$MAE+model1_min$results$MAE)
print(model2_max$results$MAE+model2_min$results$MAE)
print(min(model7_max$results$MAE+model7_min$results$MAE))
maxPrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size_fact , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, max_price)
maxPrice_Clean_Training <- data.frame(model.matrix(~., data=maxPrice_Clean_Training_prev))
minPrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size_fact , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, min_price)
minPrice_Clean_Training <- data.frame(model.matrix(~., data=minPrice_Clean_Training_prev))
#-------- Data normalization -------------------
index_Response <- match(c("max_price", "min_price", "price_variation", "price_percentage_variation_min","price_percentage_variation_max", "ave_price"), names(clean6))
preProcValues <- preProcess(clean6[-index_Response], method = "range")
trainScaled <- predict(preProcValues, clean6)
glimpse(trainScaled)
testScaled <- predict(preProcValues, clean_test3)
glimpse(testScaled)
# Selecting only the features to use for Normalized data
maxPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size_fact , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, max_price)
maxPrice_Norm_Training <- data.frame(model.matrix(~., data=maxPrice_Norm_Training_prev))
maxPrice_Norm_Training
minPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size_fact , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, min_price)
minPrice_Norm_Training <- data.frame(model.matrix(~., data=minPrice_Norm_Training_prev))
minPrice_Norm_Training
#------Repeated K-Fold Cross Validation (K = 20, repeats = 3)----------------
# Training control definition
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 1 (Linear regression)
model1_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
model1_max$results$MAE
model1_min$results$MAE
model2_max$results$MAE
model2_min$results$MAE
model7_max$results$MAE
model7_min$results$MAE
print(model1_max$results$MAE+model1_min$results$MAE)
print(model2_max$results$MAE+model2_min$results$MAE)
print(min(model7_max$results$MAE+model7_min$results$MAE))
maxPrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, max_price)
maxPrice_Clean_Training <- data.frame(model.matrix(~., data=maxPrice_Clean_Training_prev))
minPrice_Clean_Training_prev <- clean6 %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, min_price)
minPrice_Clean_Training <- data.frame(model.matrix(~., data=minPrice_Clean_Training_prev))
#-------- Data normalization -------------------
index_Response <- match(c("max_price", "min_price", "price_variation", "price_percentage_variation_min","price_percentage_variation_max", "ave_price"), names(clean6))
preProcValues <- preProcess(clean6[-index_Response], method = "range")
trainScaled <- predict(preProcValues, clean6)
glimpse(trainScaled)
testScaled <- predict(preProcValues, clean_test3)
glimpse(testScaled)
# Selecting only the features to use for Normalized data
maxPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, max_price)
maxPrice_Norm_Training <- data.frame(model.matrix(~., data=maxPrice_Norm_Training_prev))
maxPrice_Norm_Training
minPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, ssd, pixels_x, pixels_y, x360, cpu_benchmark_score, gpu_benchmark_score, base_name_clean, min_price)
minPrice_Norm_Training <- data.frame(model.matrix(~., data=minPrice_Norm_Training_prev))
minPrice_Norm_Training
#------Repeated K-Fold Cross Validation (K = 20, repeats = 3)----------------
# Training control definition
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 1 (Linear regression)
model1_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
model1_max$results$MAE
model1_min$results$MAE
model2_max$results$MAE
model2_min$results$MAE
model7_max$results$MAE
model7_min$results$MAE
print(model1_max$results$MAE+model1_min$results$MAE)
print(model2_max$results$MAE+model2_min$results$MAE)
print(min(model7_max$results$MAE+model7_min$results$MAE))
##### Train the model 9
model9_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "extraTrees", trControl = train.control, metric = "MAE")
library(extraTrees)
model9_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "extraTrees", trControl = train.control, metric = "MAE")
model9_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "glmboost", trControl = train.control, metric = "MAE")
model9_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "glmboost", trControl = train.control, metric = "MAE")
##### Train the model 10
model10_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "dwdPoly", trControl = train.control, metric = "MAE")
##### Train the model 10
model10_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "krlsPoly", trControl = train.control, metric = "MAE")
##### Train the model 10
model10_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "krlsPoly", trControl = train.control, metric = "MAE")
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 20, repeats = 3)
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GAM )
model3_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gamLoess", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
##### Train the model 9
model9_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "glmboost", trControl = train.control, metric = "MAE")
#--------Models for min_price with Normalized data (except decision tree models) -----------------
#Features: brand, touchscreen, screen_size , weight, ram, storage, ssd, resolution, discrete_gpu,
#          cpu_benchmark_score, gpu_benchmark_score
##### Train the model 1 (Linear regression)
model1_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "gamLoess", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest  <---------------BEST MODEL SO FAR
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting # warning for some brands (few observations)
model8_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
##### Train the model 9
model9_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "glmboost", trControl = train.control, metric = "MAE")
print(model1_max$results$MAE+model1_min$results$MAE)
print(model2_max$results$MAE+model2_min$results$MAE)
print(model3_max$results$MAE+model3_min$results$MAE)
print(min(model4_max$results$MAE+model4_min$results$MAE))
print(min(model5_max$results$MAE+model5_min$results$MAE))
print(min(model6_max$results$MAE+model6_min$results$MAE))
print(min(model7_max$results$MAE+model7_min$results$MAE)) # <---------------BEST MODEL SO FAR
print(min(model8_max$results$MAE+model8_min$results$MAE))
print(model9_max$results$MAE+model9_min$results$MAE)
print(model1_max$results$MAE+model1_min$results$MAE)
print(model2_max$results$MAE+model2_min$results$MAE)
print(model3_max$results$MAE+model3_min$results$MAE)
print(min(model4_max$results$MAE+model4_min$results$MAE))
print(min(model5_max$results$MAE+model5_min$results$MAE))
print(min(model6_max$results$MAE+model6_min$results$MAE))
print(min(model7_max$results$MAE+model7_min$results$MAE)) # <---------------BEST MODEL SO FAR
print(min(model8_max$results$MAE+model8_min$results$MAE))
print(min(model9_max$results$MAE+model9_min$results$MAE))
model3_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gam", trControl = train.control, metric = "MAE")
##### Train the model 10
model10_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "treebag", trControl = train.control, metric = "MAE")
##### Train the model 11
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE")
##### Train the model 12
model12_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
##### Train the model 11
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE")
##### Train the model 12
model12_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
##### Train the model 11
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE")
##### Train the model 12
model12_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE")
model3_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "gam", trControl = train.control, metric = "MAE")
##### Train the model 12
model12_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
##### Train the model 11
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE")
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
library(MASS)
##### Train the model 12
model12_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
##### Train the model 11
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE")
##### Train the model 11
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
library(PerformanceAnalytics)
##### Train the model 11
model11_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
##### Train the model 3 (GAM)
model3_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "gam", trControl = train.control, metric = "MAE")
##### Train the model 10
model10_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "treebag", trControl = train.control, metric = "MAE")
##### Train the model 11
model11_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "bayesglm", trControl = train.control, metric = "MAE")
print(model3_max$results$MAE+model3_min$results$MAE)
print(min(model3_max$results$MAE+model3_min$results$MAE))
print(model10_max$results$MAE+model10_min$results$MAE)
print(model11_max$results$MAE+model11_min$results$MAE)
