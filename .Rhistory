model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "bartMachine", trControl = train.control, metric = "MAE") #warning a lot of features
library(bartMachine)
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "bartMachine", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "bayesglm", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "bayesglm", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "brnn", trControl = train.control, metric = "MAE") #warning a lot of features
warnings()
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gamboost", trControl = train.control, metric = "MAE") #warning a lot of features
warnings()
model.matrix(max_price~., data=maxPrice_Norm_Training)
glimpse(maxPrice_Norm_Training)
maxPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, max_price)
maxPrice_Norm_Training <- model.matrix(max_price~., data=maxPrice_Norm_Training_prev)
glimpse(maxPrice_Norm_Training)
maxPrice_Norm_Training
minPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, min_price)
minPrice_Norm_Training <- model.matrix(min_price~., data=minPrice_Norm_Training_prev)
minPrice_Norm_Training
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gamboost", trControl = train.control, metric = "MAE") #warning a lot of features
type(maxPrice_Norm_Training)
class(maxPrice_Norm_Training)
maxPrice_Norm_Training <- data.frame(model.matrix(max_price~., data=maxPrice_Norm_Training_prev))
class(maxPrice_Norm_Training)
minPrice_Norm_Training <- data.frame(model.matrix(min_price~., data=minPrice_Norm_Training_prev))
minPrice_Norm_Training
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gamboost", trControl = train.control, metric = "MAE") #warning a lot of features
maxPrice_Norm_Training <- dummy_cols(maxPrice_Norm_Training_prev)
class(maxPrice_Norm_Training)
maxPrice_Norm_Training <- dummy_columns(maxPrice_Norm_Training_prev)
class(maxPrice_Norm_Training)
maxPrice_Norm_Training <- data.frame(model.matrix(~., data=maxPrice_Norm_Training_prev))
class(maxPrice_Norm_Training)
minPrice_Norm_Training <- data.frame(model.matrix(~., data=minPrice_Norm_Training_prev))
minPrice_Norm_Training
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gamboost", trControl = train.control, metric = "MAE") #warning a lot of features
warnings()
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
warnings()
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
#--------Models for min_price with Normalized data (except decision tree models) -----------------
##### Train the model 1 (Linear regression)
model1_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
#------- Summarize the results with Normalized data ----------------
print((model1_max$results$MAE+model1_min$results$MAE)/2)
print((model2_max$results$MAE+model2_min$results$MAE)/2)
print((model3_max$results$MAE+model3_min$results$MAE)/2)
print(min((model4_max$results$MAE+model4_min$results$MAE)/2))
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gamboost", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "gamboost", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "brnn", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "nnet", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "nnet", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
maxPrice_Clean_Training_prev <- training_subset %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, max_price)
maxPrice_Clean_Training <- data.frame(model.matrix(~., data=maxPrice_Clean_Training_prev))
maxPrice_Clean_Training
minPrice_Clean_Training_prev <- training_subset %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, min_price)
minPrice_Clean_Training <- data.frame(model.matrix(~., data=minPrice_Clean_Training_prev))
minPrice_Clean_Training
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "nnet", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "mxnet", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "gamboost", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "brnn", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "glmboost", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "glmboost", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "BstLm", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "BstLm", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "BstLm", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
print((model5_max$results$MAE+model5_min$results$MAE)/2)
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "DENFIS", trControl = train.control, metric = "MAE") #warning a lot of features
warnings()
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "enet", trControl = train.control, metric = "MAE") #warning a lot of features
warnings()
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE") #warning a lot of features
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "randomGLM", trControl = train.control, metric = "MAE") #warning a lot of features
print((model5_max$results$MAE+model5_min$results$MAE)/2)
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "gamLoess", trControl = train.control, metric = "MAE") #warning a lot of features
model5_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
#--------Load Data-------------------------------------------
train_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/train.csv", na.strings = c("", "NA"))
test_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/test.csv", na.strings=c("NA",""))
#--------Prepare Train Data---------------------------------
head(train_df)
sum(is.na(train_df))
colnames(train_df)[12] <- "dkeyboard"
colnames(train_df)[1] <- "id"
vis_miss(train_df,cluster= TRUE)
gg_miss_var(train_df)
gg_miss_case(train_df)
rown_four_nulls <- as.integer(rownames(train_df[rowSums(is.na(train_df[])) == 4,]))
clean2 <- train_df[-c(rown_four_nulls),]
gg_miss_var(clean2)
gg_miss_case(clean2)
clean2$screen_surface <- mapvalues(clean2$screen_surface,c("glossy", "matte"), c("Glossy", "Matte"))
aggr(x = clean2[,8:20])
glimpse(clean2)
clean3_knn <- knnImputation(clean2)
aggr(x=clean3_knn)
clean3_knn %>%
summarise_if(is.factor,nlevels)
#-------Split Train Data to train/test subsets (80/20 percent) ----------------------
require(caTools)
set.seed(741)
sample = sample.split(clean3_knn$id,SplitRatio = 0.8)
training_subset =subset(clean3_knn,sample ==TRUE)
test_subset = subset(clean3_knn,sample ==FALSE)
#-------Prepare Test Data-----------------------------------
colnames(test_df)[12] <- "dkeyboard"
colnames(test_df)[1] <- "id"
glimpse(test_df)
sum(is.na(test_df))
aggr(x=test_df[,6:20])
clean_test <- test_df
clean_test$screen_surface <- mapvalues(clean_test$screen_surface,c("glossy","matte"),c("Glossy","Matte"))
#--------- Data not normalized ---------------
# Selecting only the features to use
maxPrice_Clean_Training_prev <- clean3_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, max_price)
maxPrice_Clean_Training <- data.frame(model.matrix(~., data=maxPrice_Clean_Training_prev))
minPrice_Clean_Training_prev <- clean3_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, min_price)
minPrice_Clean_Training <- data.frame(model.matrix(~., data=minPrice_Clean_Training_prev))
#-------- Data normalization -------------------
index_Categ <- match(c("brand", "touchscreen", "dkeyboard", "os", "max_price", "min_price"), names(clean3_knn))
preProcValues <- preProcess(clean3_knn[-index_Categ], method = "range")
trainScaled <- predict(preProcValues, clean3_knn)
glimpse(trainScaled)
testScaled <- predict(preProcValues, clean_test)
glimpse(testScaled)
#------Repeated K-Fold Cross Validation (K = 5, repeats = 3)----------------
# Selecting only the features to use
maxPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, max_price)
maxPrice_Norm_Training <- data.frame(model.matrix(~., data=maxPrice_Norm_Training_prev))
maxPrice_Norm_Training
minPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, min_price)
minPrice_Norm_Training <- data.frame(model.matrix(~., data=minPrice_Norm_Training_prev))
minPrice_Norm_Training
# Training control definition
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 5, repeats = 3)
#--------Models for maxPrice with Normalized data (except decision tree models) -----------------
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest
model7_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting
model8_max <- train(max_price ~ . , data = maxPrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
#--------Models for min_price with Normalized data (except decision tree models) -----------------
##### Train the model 1 (Linear regression)
model1_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 3 (GLM with Step AIC)
model3_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glmStepAIC", trControl = train.control, metric = "MAE")
##### Train the model 4 (Elastic net (glm))
model4_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glmnet", trControl = train.control, metric = "MAE")
##### Train the model 5 Boosted Tree
model5_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "bstTree", trControl = train.control, metric = "MAE")
##### Train the model 6 eXtreme Gradient Boosting
model6_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "xgbTree", trControl = train.control, metric = "MAE")
##### Train the model 7 Parallel Random Forest
model7_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "parRF", trControl = train.control, metric = "MAE")
##### Train the model 8 Stochastic Gradient Boosting
model8_min <- train(min_price ~ . , data = minPrice_Clean_Training,
method = "gbm", trControl = train.control, metric = "MAE")
print(model1_max$results$MAE+model1_min$results$MAE)
print(model2_max$results$MAE+model2_min$results$MAE)
print(model3_max$results$MAE+model3_min$results$MAE)
print(min(model4_max$results$MAE+model4_min$results$MAE))
print(min(model5_max$results$MAE+model5_min$results$MAE))
print(min(model6_max$results$MAE+model6_min$results$MAE))
print(min(model7_max$results$MAE+model7_min$results$MAE))
print(min(model8_max$results$MAE+model8_min$results$MAE))
# Test data not normalized
Test_prev <- clean_test %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os)
Price_Test <- data.frame(model.matrix(~., data=Test_prev))
glimpse(Price_Test)
# Test data normalized
NormTest_prev <- clean_test %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os)
Price_NormTest <- data.frame(model.matrix(~., data=NormTest_prev))
#Adding missing columns
missingcol <- names(maxPrice_Clean_Training[!(names(maxPrice_Clean_Training[, !(names(maxPrice_Clean_Training) == "max_price")]) %in% names(Price_Test))])
Price_Test[missingcol] <- 0
Price_NormTest[missingcol] <- 0
# Prediction of min_price
results <- clean_test %>% select(id)
predict(model1_min, Price_NormTest, type = "raw") #Linear regression should reference the Normalized Test data
results["MIN"] <- predict(model7_min, Price_Test, type = "raw") #Parallel Random Forest (best so far)
results
results["MIN"] <- predict(model7_min, Price_Test, type = "raw") #Parallel Random Forest (best so far)
pred <- predict(model1_min, Price_NormTest, type = "raw") #Linear regression should reference the Normalized Test data
pred
pred <- predict(model7_min, Price_Test, type = "raw") #Parallel Random Forest (best so far)
pred
pred <- t(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
pred
pred <- add_predictions(Price_Test, model7_min, var = "MIN") #Parallel Random Forest (best so far)
pred
pred <- extractPrediction(model7_min, Price_Test, type = "raw") #Parallel Random Forest (best so far)
pred
pred <- extractPrediction(model7_min, Price_Test) #Parallel Random Forest (best so far)
pred
predict(model7_min, Price_Test, type = "raw") #Parallel Random Forest (best so far)
pred <- extractPrediction(model7_min, testX = Price_Test) #Parallel Random Forest (best so far)
pred
pred <- predict(model7_min, Price_Test, type = "raw") #Parallel Random Forest (best so far)
str(pred)
pred
pred[1]
pred[,1]
class(pred)
count(pred)
length(pred)
pred[222]
pred[221]
pred[1]
pred[0]
pred[1]
extractPrediction(model7_min, testX =  Price_Test, testY = NULL,
unkX = NULL)
bothModels <- list(model7_min ,model7_max)
predict(bothModels)
predTargets <- extractPrediction(
bothModels,
testX = Price_Test,
testY = NULL,
unkX = unkX)
predTargets <- extractPrediction(
bothModels,
testX = Price_Test,
testY = NULL)
predTargets
table(pred)
data.frame(pred)
pred["MIN"] <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
pred
pred <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
pred
names(pred)
names(pred) <- "MIN"
pred
results <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(results[2]) <- "MIN"
results
results <- clean_test %>% select(id)
results
pred_min <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
results["MIN"] <- pred_min
results
pred_min <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_min) <- "MIN"
pred_min
cbind(results,pred_min)
count(pred_min)
count(Price_Test)
count(clean_test)
count(Test_prev)
glimpse(Test_prev)
glimpse(Price_Test)
glimpse(model.matrix(~., data=Test_prev))
model.matrix(~., data=Test_prev)
sum(is.na(clean_test))
clean_test_knn <- knnImputation(clean_test)
aggr(x=clean_test_knn)
clean_test_knn %>%
summarise_if(is.factor,nlevels)
sum(is.na(clean_test_knn))
Test_prev <- clean_test_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os)
Price_Test <- data.frame(model.matrix(~., data=Test_prev))
glimpse(Test_prev)
glimpse(Price_Test)
model.matrix(~., data=Test_prev)
# Test data normalized
NormTest_prev <- clean_test_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os)
Price_NormTest <- data.frame(model.matrix(~., data=NormTest_prev))
#Adding missing columns
missingcol <- names(maxPrice_Clean_Training[!(names(maxPrice_Clean_Training[, !(names(maxPrice_Clean_Training) == "max_price")]) %in% names(Price_Test))])
Price_Test[missingcol] <- 0
Price_NormTest[missingcol] <- 0
# Prediction of min_price
results <- clean_test_knn %>% select(id)
results
predict(model1_min, Price_NormTest, type = "raw") #Linear regression should reference the Normalized Test data
pred_min <- data.frame(predict(model7_min, Price_Test, type = "raw")) #Parallel Random Forest (best so far)
names(pred_min) <- "MIN"
pred_min
cbind(results,pred_min)
bothModels <- list(model7_min ,model7_max)
pred <- data.frame(predict(bothModels, Price_Test, type = "raw"))
names(pred) <- c("MIN","MAX")
pred
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 1(Parallel Random Forest).csv")
id_test <- clean_test_knn %>% select(id)
results <- cbind(id_test,pred)
results
write.csv(results, file = "Model 1(Parallel Random Forest).csv")
write.csv(results, file = "Model 1(Parallel Random Forest).csv")
results$id
results[1]
results
write.csv(results, file = "Model 1(Parallel Random Forest).csv", row.names = F)
predict(model7_max, Price_Test, type = "raw")
print(model1_max$results$MAE+model1_min$results$MAE)
print(model2_max$results$MAE+model2_min$results$MAE)
print(model3_max$results$MAE+model3_min$results$MAE)
print(min(model4_max$results$MAE+model4_min$results$MAE))
print(min(model5_max$results$MAE+model5_min$results$MAE))
print(min(model6_max$results$MAE+model6_min$results$MAE))
print(min(model7_max$results$MAE+model7_min$results$MAE))
print(min(model8_max$results$MAE+model8_min$results$MAE))
library(plyr)
library(tidyverse)
library(naniar)
library(VIM)
library(DMwR)
library(caret)
#--------Load Data-------------------------------------------
train_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/train.csv", na.strings = c("", "NA"))
test_df <- read.csv("https://raw.githubusercontent.com/behnouri/lprice-prediction/master/test.csv", na.strings=c("NA",""))
#--------Prepare Train Data---------------------------------
head(train_df)
sum(is.na(train_df))
colnames(train_df)[12] <- "dkeyboard"
colnames(train_df)[1] <- "id"
vis_miss(train_df,cluster= TRUE)
gg_miss_var(train_df)
gg_miss_case(train_df)
rown_four_nulls <- as.integer(rownames(train_df[rowSums(is.na(train_df[])) == 4,]))
clean2 <- train_df[-c(rown_four_nulls),]
gg_miss_var(clean2)
gg_miss_case(clean2)
clean2$screen_surface <- mapvalues(clean2$screen_surface,c("glossy", "matte"), c("Glossy", "Matte"))
aggr(x = clean2[,8:20])
glimpse(clean2)
clean3_knn <- knnImputation(clean2)
aggr(x=clean3_knn)
clean3_knn %>%
summarise_if(is.factor,nlevels)
#-------Split Train Data to train/test subsets (80/20 percent) ----------------------
require(caTools)
set.seed(741)
sample = sample.split(clean3_knn$id,SplitRatio = 0.8)
training_subset =subset(clean3_knn,sample ==TRUE)
test_subset = subset(clean3_knn,sample ==FALSE)
#-------Prepare Test Data-----------------------------------
colnames(test_df)[12] <- "dkeyboard"
colnames(test_df)[1] <- "id"
glimpse(test_df)
sum(is.na(test_df))
aggr(x=test_df[,6:20])
clean_test <- test_df
clean_test$screen_surface <- mapvalues(clean_test$screen_surface,c("glossy","matte"),c("Glossy","Matte"))
clean_test_knn <- knnImputation(clean_test)
aggr(x=clean_test_knn)
clean_test_knn %>%
summarise_if(is.factor,nlevels)
#--------- Data not normalized ---------------
# Selecting only the features to use
maxPrice_Clean_Training_prev <- clean3_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, max_price)
maxPrice_Clean_Training <- data.frame(model.matrix(~., data=maxPrice_Clean_Training_prev))
minPrice_Clean_Training_prev <- clean3_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, min_price)
minPrice_Clean_Training <- data.frame(model.matrix(~., data=minPrice_Clean_Training_prev))
#-------- Data normalization -------------------
index_Categ <- match(c("brand", "touchscreen", "dkeyboard", "os", "max_price", "min_price"), names(clean3_knn))
preProcValues <- preProcess(clean3_knn[-index_Categ], method = "range")
trainScaled <- predict(preProcValues, clean3_knn)
glimpse(trainScaled)
testScaled <- predict(preProcValues, clean_test)
glimpse(testScaled)
#------Repeated K-Fold Cross Validation (K = 5, repeats = 3)----------------
# Selecting only the features to use
maxPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, max_price)
maxPrice_Norm_Training <- data.frame(model.matrix(~., data=maxPrice_Norm_Training_prev))
maxPrice_Norm_Training
minPrice_Norm_Training_prev <- trainScaled %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os, min_price)
minPrice_Norm_Training <- data.frame(model.matrix(~., data=minPrice_Norm_Training_prev))
minPrice_Norm_Training
# Training control definition
set.seed(123)
train.control <- trainControl(method = "repeatedcv",
number = 5, repeats = 3)
#--------Models for maxPrice with Normalized data (except decision tree models) -----------------
##### Train the model 1 (Linear regression)
model1_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_max <- train(max_price ~ . , data = maxPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 1 (Linear regression)
model1_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "lm", trControl = train.control, metric = "MAE") #warning a lot of features
##### Train the model 2 (Generalized Linear Model without func specified -> could be improved)
model2_min <- train(min_price ~ . , data = minPrice_Norm_Training,
method = "glm", trControl = train.control, metric = "MAE") #warning a lot of features
Test_prev <- clean_test_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os)
Price_Test <- data.frame(model.matrix(~., data=Test_prev))
glimpse(Test_prev)
glimpse(Price_Test)
model.matrix(~., data=Test_prev)
# Test data normalized
NormTest_prev <- clean_test_knn %>% select(brand, touchscreen, screen_size , weight, ram, storage, dkeyboard, ssd, os)
Price_NormTest <- data.frame(model.matrix(~., data=NormTest_prev))
#Adding missing columns
missingcol <- names(maxPrice_Clean_Training[!(names(maxPrice_Clean_Training[, !(names(maxPrice_Clean_Training) == "max_price")]) %in% names(Price_Test))])
Price_Test[missingcol] <- 0
Price_NormTest[missingcol] <- 0
predict(model2_min, Price_NormTest, type = "raw")
predict(model2_min, Price_NormTest, type = "response")
